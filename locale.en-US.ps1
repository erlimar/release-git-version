# Copyright (c) Erliimar Silva Campos. All rights reserved.
# Licensed under the Apache License, Version 2.0. More license information in LICENSE.txt.

$env:MSG_ERROR_INSTALL_GIT              = "Git is required. Install Git tool from https://git-scm.com"
$env:MSG_ERROR_TEMPLATE                 = "Error: {0}"
$env:MSG_ERROR_EMPTY_MERGE_BRANCH       = "At least one work (branch/commit) must be informed."
$env:MSG_ERROR_TEMPDIR_EXISTS           = "Temporary directory already exists."

$env:MSG_ERROR_BRANCH_EQUAL_PRODUCTION  = "Work branch [{0}] is equal to production branch."
$env:MSG_ERROR_BRANCH_EQUAL_DEVELOPMENT = "Work branch [{0}] is equal to development branch."
$env:MSG_ERROR_BRANCH_EQUAL_VERSION     = "Work branch [{0}] is equal to version branch."
$env:MSG_ERROR_BRANCH_DUPLICATED        = "Work branch [{0}] is duplicated."

$env:MSG_ERROR_REPOSITORY_CLONE         = "It was possible to clone the repository [{0}]."
$env:MSG_ERROR_VERSIONBRANCH_EXISTS     = "Version branch [{0}] already exists."
$env:MSG_ERROR_VERSIONTAG_EXISTS        = "Version tag [{0}] already exists."
$env:MSG_ERROR_PRODBRANCH_NOT_EXISTS    = "Production branch [{0}] not exists."
$env:MSG_ERROR_DEVBRANCH_NOT_EXISTS     = "Development branch [{0}] not exists."
$env:MSG_ERROR_WORK_BRANCH_NOT_EXISTS   = "Work branch [{0}] not exists."
$env:MSG_ERROR_SET_GIT_USER_NAME        = "Failure to set git committer name to [{0}]."
$env:MSG_ERROR_SET_GIT_USER_EMAIL       = "Failure to set git committer e-mail to [{0}]."
$env:MSG_ERROR_CHECKOUT_DEVELOPMENT     = "Failure to checkout development branch [{0}]."
$env:MSG_ERROR_CREATE_RELEASE_BRANCH    = "Failure to create release branch [{0}]."
$env:MSG_ERROR_EXEC_GIT_COMMAND         = "Failed on execute Git command: [{0}]"
$env:MSG_ERROR_FAILED_DETECT_GIT_REMOTE = "Failed on detect git remote from URL [{0}]."
$env:MSG_ERROR_FAILED_INTEGRATE_BRANCH  = "Failure to integrate branch [{0}] in version [{1}]."

$env:MSG_PROMPT_ADD_WORK_TITLE          = "Enter the work (branch/commit) to be integrated into version."
$env:MSG_PROMPT_ADD_WORK_LINE           = "-------------------------------------------------------------"
$env:MSG_PROMPT_ADD_WORK                = "Add a work (branch/commit hash) to merge [BLANK to stop] ?"
$env:MSG_PROMPT_ADD_LOG                 = "    > Message log commit [BLANK to last]"
$env:MSG_PROMPT_INFORMED_VALUE          = "Informed value: [{0}]"

$env:MSG_ENTER_REPOSITORY_URL           = "Enter a repository URL"
$env:MSG_ENTER_VERSION_NUMBER           = "Enter a version number"
$env:MSG_ENTER_VERSION_BRANCH           = "Enter a version branch name"
$env:MSG_ENTER_COMMITTER_NAME           = "Enter a Git commiter name"
$env:MSG_ENTER_COMMITTER_EMAIL          = "Enter a Git commiter e-mail"

$env:LOG_STARTED                        = "Started generating new version [{0}]"
$env:LOG_FINISHED                       = "Finished generation for new version [{0}]"
$env:LOG_DATETIME_FORMAT                = "yyyy-MM-dd__HH-mm-ss"
$env:LOG_REPOSITORY_CLONE               = "Cloning repository {0}..."
$env:LOG_CHECKING_BRANCHES              = "Checking branches/tags..."
$env:LOG_WORKFILE_CSV                   = "Using CSV file ({0}) to work branches." 
$env:LOG_CHECK_MERGE_LIST               = "Check work merge list..."
$env:LOG_CHECK_MERGE_LIST_OK            = "Work merge list OK ({0})!"
$env:LOG_CHECK_BRANCHES_OK              = "Branches OK!"
$env:LOG_CONFIGURING_USER_DATA          = "Configuring user data..."
$env:LOG_CONFIGURING_USER_DATA_DETAILS  = "Configuring user data (Name: {0}, E-mail: {1})."
$env:LOG_CONFIGURING_USER_OK            = "Configured user data."
$env:LOG_CHANGE_TO_DEVELOPMENT_BRANCH   = "Change to development branch [{0}]."
$env:LOG_CREATING_VERSION_BRANCH        = "Creating version branch [{0}]."
$env:LOG_INTEGRATING_BRANCHES_VERSION   = "Integrating branches in version."
$env:LOG_WRITING_VERSION_FILE           = "Writing versopm file..."

